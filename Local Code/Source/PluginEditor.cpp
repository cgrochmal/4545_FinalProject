/*
 ==============================================================================
 
 This file was auto-generated by the Introjucer!
 
 It contains the basic framework code for a JUCE plugin editor.
 
 ==============================================================================
 */

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
Musi45effectAudioProcessorEditor::Musi45effectAudioProcessorEditor (Musi45effectAudioProcessor& p)
:   AudioProcessorEditor (&p), processor (p),
lfoDepthSlider("LfoSpeed"),
lfoSpeedSlider("LfoDepth %"),
feedbackSlider("Feedback %"),
delayTimeSlider("Delay Time"),
wetSlider("Wet %"),
tapdelay("Tap Delay"),
lfoDepthLabel("","LFO Depth %"),
lfoSpeedLabel("","LFO Speed Hz"),
feedbackLabel("", "Feedback %"),
delayTimeLabel("", "Delay (ms)"),
wetLabel("", "Wet %"),
tempoTimer()

{
    
    
    float labelFontSize = 12.0;
    
    lfoDepthLabel.setColour(juce::Label::textColourId, juce::Colour(255, 255, 255));
    lfoSpeedLabel.setColour(juce::Label::textColourId, juce::Colour(255, 255, 255));
    feedbackLabel.setColour(juce::Label::textColourId, juce::Colour(255, 255, 255));
    delayTimeLabel.setColour(juce::Label::textColourId, juce::Colour(255, 255, 255));
    wetLabel.setColour(juce::Label::textColourId, juce::Colour(255, 255, 255));
    
    // LFO depth
    lfoDepthSlider.setSliderStyle(Slider::LinearVertical);  // what kind of slider?
    lfoDepthSlider.setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
    lfoDepthSlider.setRange(minLfoD, maxLfoD, 1.0);
    addAndMakeVisible(lfoDepthSlider);                      // add the slider to the GUI
    lfoDepthSlider.addListener(this);                       // add a listener for this function
    lfoDepthLabel.attachToComponent (&lfoDepthSlider, false);
    lfoDepthLabel.setFont(Font (labelFontSize));
    
    // LFO speed
    lfoSpeedSlider.setSliderStyle(Slider::LinearVertical);  // what kind of slider?
    lfoSpeedSlider.setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
    lfoSpeedSlider.setRange(minLfoS, maxLfoS, 0.005);
    lfoSpeedSlider.setSkewFactor(0.3);
    addAndMakeVisible(lfoSpeedSlider);                      // add the slider to the GUI
    lfoSpeedSlider.addListener(this);                       // add a listener for this function
    lfoSpeedLabel.attachToComponent (&lfoSpeedSlider, false);
    lfoSpeedLabel.setFont(Font (labelFontSize));
    
    // Feedback
    feedbackSlider.setSliderStyle(Slider::LinearVertical);  // what kind of slider?
    feedbackSlider.setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
    feedbackSlider.setRange(minF, maxF, .01);
    feedbackSlider.setSkewFactor(1.5);
    addAndMakeVisible(feedbackSlider);                      // add the slider to the GUI
    feedbackSlider.addListener(this);                       // add a listener for this function
    feedbackLabel.attachToComponent (&feedbackSlider, false);
    feedbackLabel.setFont(Font (labelFontSize));
    
    // Delay Time
    delayTimeSlider.setSliderStyle(Slider::LinearVertical);  // what kind of slider?
    delayTimeSlider.setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
    delayTimeSlider.setRange(minD, maxD, 1);
    addAndMakeVisible(delayTimeSlider);                      // add the slider to the GUI
    delayTimeSlider.addListener(this);                       // add a listener for this function
    delayTimeLabel.attachToComponent (&delayTimeSlider, false);
    delayTimeLabel.setFont(Font (labelFontSize));
    
    // Wet Amount
    wetSlider.setSliderStyle(Slider::LinearVertical);  // what kind of slider?
    wetSlider.setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
    wetSlider.setRange(minW, maxW, 1);
    addAndMakeVisible(wetSlider);                      // add the slider to the GUI
    wetSlider.addListener(this);                       // add a listener for this function
    wetLabel.attachToComponent (&wetSlider, false);
    wetLabel.setFont(Font (labelFontSize));
    
    preset1.setButtonText("Preset 1");
    addAndMakeVisible(preset1);
    preset1.addListener(this);
    
    tapdelay.setButtonText("Tap Delay");
    //tapdelay.setClickingTogglesState(true);
    addAndMakeVisible(tapdelay);
    tapdelay.addListener(this);
    //tapdelay.setTriggeredOnMouseDown(false);
    addAndMakeVisible(delaytime);
    
    // Preset1
    
    
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (700, 300);
    
    // STEP 5.4 - start the timer
    startTimer (80);      // timerCallback() will get called every N msec.
    
    tempoTimer = tempoTimer.getCurrentTime();
    //previous = clock();
    previous = tempoTimer.currentTimeMillis();
   

    
    
}

Musi45effectAudioProcessorEditor::~Musi45effectAudioProcessorEditor()
{
}

//==============================================================================
void Musi45effectAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::black);
    
    // STEP 1.6 - add some text to the UI
    g.setColour (Colours::white);
    g.setFont (15.0f);
    g.drawFittedText ("FLORUS", getLocalBounds(), Justification::centredTop, 1);
}

void Musi45effectAudioProcessorEditor::resized()
{
    // Set the position and size of the slider objects
    int w = 80; int h = 200; int x = 40; int y = 60;
    lfoDepthSlider.setBounds(x, y, w, h); x += w;
    lfoSpeedSlider.setBounds(x, y, w, h); x += w;
    feedbackSlider.setBounds(x, y, w, h); x += w;
    delayTimeSlider.setBounds(x, y, w, h); x += w;
    wetSlider.setBounds(x, y, w, h); x += w;
    preset1.setBounds(x, y-20, w, h/2);
    tapdelay.setBounds(x, y*2+40, w, h/2); x+=w;
    delaytime.setBounds(x, y*2+40, w, h/2);
}

//==============================================================================
// This is our Slider::Listener callback. Get's called when the user drags a slider.
void Musi45effectAudioProcessorEditor::sliderValueChanged (Slider* slider)
{
    // It's vital to use setParameterNotifyingHost to change any parameters that are automatable
    // by the host, rather than just modifying them directly, otherwise the host won't know
    // that they've changed.
    
    float vstVal, sliderVal;
    int paramIndex;
    
    if (slider == &lfoDepthSlider){
        paramIndex = Musi45effectAudioProcessor::lfoDepthParam;
    }
    else if (slider == &lfoSpeedSlider){
        paramIndex = Musi45effectAudioProcessor::lfoSpeedParam;
    }
    else if (slider == &feedbackSlider){
        paramIndex = Musi45effectAudioProcessor::feedbackParam;
    }
    else if (slider == &delayTimeSlider){
        paramIndex = Musi45effectAudioProcessor::delayTimeParam;
    }
    else if (slider == &wetSlider){
        paramIndex = Musi45effectAudioProcessor::wetParam;
    }
    
    // first set the usrParam from the slider, and get the vst normalized version of the uParam:
    sliderVal = slider->getValue();
    vstVal = getProcessor().usrParams[paramIndex].setWithUparam(sliderVal);
    
    // then call setParameter with the vst normalized value
    getProcessor().setParameterNotifyingHost(paramIndex, vstVal);
    
    
 
}

// button callback
void Musi45effectAudioProcessorEditor::buttonClicked(Button * button)
{
    
    if (button == &tapdelay) {
        /*if(tapdelay.getToggleState()) {
         float vstVal, sliderVal;
         int paramIndex;
         String time = std::to_string(tapdelay.getMillisecondsSinceButtonDown());
         delaytime.setText(time);
         std::cout << tapdelay.getMillisecondsSinceButtonDown() << std::endl;
         std::cout << time << std::endl;
         paramIndex = Musi45effectAudioProcessor::delayTimeParam;
         sliderVal = tapdelay.getMillisecondsSinceButtonDown();
         vstVal = getProcessor().usrParams[paramIndex].setWithUparam(sliderVal);
         getProcessor().setParameterNotifyingHost(paramIndex, vstVal);
         }*/
        //if(((clock()-previous)/(double) CLOCKS_PE_SEC)* ) {
        //current = clock();
        
        current = tempoTimer.currentTimeMillis();
        
        double timeIntervalMs = current - previous;
        
        //tempoTimer->stopTimer();
        //tempoTimer->startTimer(20);
        
        
        
        
        //clockstaken = current - previous;
        
        //double timeInSeconds = clockstaken / (double) CLOCKS_PER_SEC;
        //double timeInMs = timeInSeconds * 1000;
        
         std::cout << 60000/timeIntervalMs << std::endl;
        
        int bpm = 60000/timeIntervalMs;
        
        
        
            delaytime.setText(std::to_string(bpm));
        
        
        
        previous = current;
        
       
        
    }
    
}

// button callback
void Musi45effectAudioProcessorEditor::buttonStateChanged(Button * button)
{
    
}



//==============================================================================
// STEP 5.3 - Set the timer callback to update the UI
// This timer periodically checks whether any of the filter's parameters have changed...
void Musi45effectAudioProcessorEditor::timerCallback()
{
    // get a pointer to our Processor object
    Musi45effectAudioProcessor& ourProc = getProcessor();
    
    // these get will update the sliders in the UI
    lfoSpeedSlider.setValue(ourProc.usrParams[Musi45effectAudioProcessor::lfoSpeedParam].getUparamVal(), dontSendNotification);
    lfoDepthSlider.setValue(ourProc.usrParams[Musi45effectAudioProcessor::lfoDepthParam].getUparamVal(), dontSendNotification);
    feedbackSlider.setValue(ourProc.usrParams[Musi45effectAudioProcessor::feedbackParam].getUparamVal(), dontSendNotification);
    delayTimeSlider.setValue(ourProc.usrParams[Musi45effectAudioProcessor::delayTimeParam].getUparamVal(), dontSendNotification);
    wetSlider.setValue(ourProc.usrParams[Musi45effectAudioProcessor::wetParam].getUparamVal(), dontSendNotification);
    
}


